#ifndef _main_h_
#define _main_h_

#include "common.h"
#include "terminal.h"

#define BR19K2 19200                       // скорость обмена 19200
#define BR9K6 9600                         // скорость обмена 9600
#define BR2K4 2400                         // скорость обмена 2400
#define UBBR_19K2 ((F_CPU / (16L * BR19K2)) - 1)
#define UBBR_9K6 ((F_CPU / (16L * BR9K6)) - 1)
#define UBBR_2K4 ((F_CPU / (16L * BR2K4)) - 1)

// частота системного тика = 600 гц:
#define CONST_RELOAD 0xB8                  // константа перезагрузки таймера '0'
#define CBOD 4                             // константа БОД
#define SYSTEM_TICK 600                    // Тик системного таймера в Гц
#define NDEV 15                            // базовый адрес устройства
#define RR_CONST 150                       // 0.25 сек до перезапуска 'WDT'

#define TO_CEL_SET (SYSTEM_TICK*3)         // изм-е темп-ры 1 раз за 10 сек

#define TEMP_OUT 0x0B                      // регистр температурных данных
#define INCL_OUT 0x0D                      // регистр угловых данных
#define INCL_180_OUT 0x0F                  // регистр угловых данных ±180°

/*==============================================================================*/
/*                              Аппаратные особенности                          */
/*==============================================================================*/

// определения выводов порта D

#define RXD PIND0                          // вывод входа приема данных ответа             IN  (^)
#define TXD PORTD1                         // вывод выхода данных по запросу               OUT (1)
#define STR PORTD4                         // вывод управления сторожевым таймером         OUT (1)
#define SET_ PIND5                         // вывод входа конфигурации установок           IN  (^)
#define KLINE PORTD6                       // вывод управления разрешения чипа 'K-LINE'    OUT (1)
                                           // "разрешение приема = 1"
#define RST PORTB7                         // вывод управления сбросом "ведомого"          OUT (1)

//#define NAGR PORTDx                        // вывод управления нагревательным элементом    OUT (0)
                                            
// определения выводов порта B

#define LED PORTD0                         // вывод управления сетодиодным индикатором     OUT (1)
#define DIR PORTD1                         // вывод управления направлением 'RS485'        OUT (0)
                                           // "разрешение передачи = 1"
#define CS PORTB2                          // вывод управления запуском "ведомого"         OUT (1)
#define MOSI PORTB3                        // вывод выхода "ведущего"                      OUT (1)
#define MISO PINB4                         // вывод входа "ведущего"                       IN  (^)
#define SCK PORTB5                         // вывод выхода тактового сигнала от "ведущего" OUT (0)
/*
  обозначения:
  - IN  (^) - вывод входа(чтение), ^ - резистивная подтяжка;
  - OUT (0) - вывод выхода(запись) начальное состояние 0, активное состояние 1;
  - OUT (1) - вывод выхода(запись) начальное состояние 1, активное состояние 0;
  Начальное и активное состояние выводов OUT определяется по принцип. схеме.
*/
/*==============================================================================*/
/*                                Описание типов                                */
/*==============================================================================*/
union u_int                                // для 2-х байтовых данных
  {
    unsigned int  du_i;                    // data_union_int
    unsigned char du_c[2];                 // data_union_char
  };                                       // 256*[0] + [1]

/*==============================================================================*/
/*                                Прототипы                                     */
/*==============================================================================*/
void Get_Buff(void);
void Meas_Cel(void);
void meas_xy(void);
void Tx_means_tick(void);  
//void termostat(void);
void SPI_MasterInit(void);
unsigned char SPI_WriteRead(unsigned char dataout);

#endif
