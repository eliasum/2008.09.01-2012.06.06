
meas_xy.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000008e  00800100  00800100  0000044c  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000069  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002d0  00000000  00000000  000004d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000015f  00000000  00000000  000007a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003b0  00000000  00000000  00000904  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000050  00000000  00000000  00000cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000bc  00000000  00000000  00000d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000089  00000000  00000000  00000dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00000e49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ae 38       	cpi	r26, 0x8E	; 142
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ff 00 	call	0x1fe	; 0x1fe <main>
  88:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <meas_xy>:

void meas_xy(void)
{
// измерение длительности и периода импульсов с выхода 'Xout' -------= X =--------

  TCNT1H = 0; TCNT1L = 0;                  // сброс Т/С1
  90:	10 92 85 00 	sts	0x0085, r1
  94:	10 92 84 00 	sts	0x0084, r1
  loop_until_bit_is_clear(PIND,XOUT);      // корректировка расчета длительности импульсов с выхода 'Xout'
  98:	4b 99       	sbic	0x09, 3	; 9
  9a:	fe cf       	rjmp	.-4      	; 0x98 <meas_xy+0x8>
  loop_until_bit_is_set(PIND,XOUT);        // ожидание фронта 1-го импульса с выхода 'Xout'
  9c:	4b 9b       	sbis	0x09, 3	; 9
  9e:	fe cf       	rjmp	.-4      	; 0x9c <meas_xy+0xc>
  TCCR1B = 0x02;                           // запуск Т/С1 с тактовой частотой CLK_io/8
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	80 93 81 00 	sts	0x0081, r24

  loop_until_bit_is_clear(PIND,XOUT);      // ожидание спада 1-го импульса с выхода 'Xout'
  a6:	4b 99       	sbic	0x09, 3	; 9
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <meas_xy+0x16>
  TCCR1B = 0x00;                           // останов Т/С1
  aa:	10 92 81 00 	sts	0x0081, r1
  one.T1X.du_c[BYTE_ONE] = TCNT1L;
  ae:	80 91 84 00 	lds	r24, 0x0084
  b2:	80 93 86 01 	sts	0x0186, r24
  one.T1X.du_c[BYTE_TWO] = TCNT1H;         // -= ДЛИТЕЛЬНОСТЬ ИМПУЛЬСА 'X' =-    
  b6:	80 91 85 00 	lds	r24, 0x0085
  ba:	80 93 87 01 	sts	0x0187, r24
  TCNT1H = 0; TCNT1L = 0;                  // сброс Т/С1
  be:	10 92 85 00 	sts	0x0085, r1
  c2:	10 92 84 00 	sts	0x0084, r1

  loop_until_bit_is_clear(PIND,XOUT);      // корректировка расчета периода импульсов с выхода 'Xout'
  c6:	4b 99       	sbic	0x09, 3	; 9
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <meas_xy+0x36>
  loop_until_bit_is_set(PIND,XOUT);        // ожидание фронта 2-го импульса с выхода 'Xout'
  ca:	4b 9b       	sbis	0x09, 3	; 9
  cc:	fe cf       	rjmp	.-4      	; 0xca <meas_xy+0x3a>
  TCCR1B = 0x02;                           // запуск Т/С1 с тактовой частотой CLK_io/8
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	80 93 81 00 	sts	0x0081, r24

  loop_until_bit_is_clear(PIND,XOUT);      // ожидание спада 2-го импульса с выхода 'Xout'
  d4:	4b 99       	sbic	0x09, 3	; 9
  d6:	fe cf       	rjmp	.-4      	; 0xd4 <meas_xy+0x44>
  loop_until_bit_is_set(PIND,XOUT);        // ожидание фронта 3-го импульса с выхода 'Xout'
  d8:	4b 9b       	sbis	0x09, 3	; 9
  da:	fe cf       	rjmp	.-4      	; 0xd8 <meas_xy+0x48>
  TCCR1B = 0x00;                           // останов Т/С1
  dc:	10 92 81 00 	sts	0x0081, r1
  one.T2X.du_c[BYTE_ONE] = TCNT1L;
  e0:	80 91 84 00 	lds	r24, 0x0084
  e4:	80 93 88 01 	sts	0x0188, r24
  one.T2X.du_c[BYTE_TWO] = TCNT1H;         // -= ПЕРИОД ИМПУЛЬСА 'X' =-          
  e8:	80 91 85 00 	lds	r24, 0x0085
  ec:	80 93 89 01 	sts	0x0189, r24

// измерение длительности и периода импульсов с выхода 'Yout' -------= 'Y' =------

  TCNT1H = 0; TCNT1L = 0;                  // сброс Т/С1
  f0:	10 92 85 00 	sts	0x0085, r1
  f4:	10 92 84 00 	sts	0x0084, r1
  loop_until_bit_is_clear(PIND,YOUT);      // корректировка расчета длительности импульсов с выхода 'Yout'
  f8:	4c 99       	sbic	0x09, 4	; 9
  fa:	fe cf       	rjmp	.-4      	; 0xf8 <meas_xy+0x68>
  loop_until_bit_is_set(PIND,YOUT);        // ожидание фронта 1-го импульса с выхода 'Yout'
  fc:	4c 9b       	sbis	0x09, 4	; 9
  fe:	fe cf       	rjmp	.-4      	; 0xfc <meas_xy+0x6c>
  TCCR1B = 0x02;                           // запуск Т/С1 с тактовой частотой CLK_io/8
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	80 93 81 00 	sts	0x0081, r24

  loop_until_bit_is_clear(PIND,YOUT);      // ожидание спада 1-го импульса с выхода 'Yout'
 106:	4c 99       	sbic	0x09, 4	; 9
 108:	fe cf       	rjmp	.-4      	; 0x106 <meas_xy+0x76>
  TCCR1B = 0x00;                           // останов Т/С1
 10a:	10 92 81 00 	sts	0x0081, r1
  one.T1Y.du_c[BYTE_ONE] = TCNT1L;
 10e:	80 91 84 00 	lds	r24, 0x0084
 112:	80 93 8a 01 	sts	0x018A, r24
  one.T1Y.du_c[BYTE_TWO] = TCNT1H;         // -= ДЛИТЕЛЬНОСТЬ ИМПУЛЬСА 'Y' =-    
 116:	80 91 85 00 	lds	r24, 0x0085
 11a:	80 93 8b 01 	sts	0x018B, r24
  TCNT1H = 0; TCNT1L = 0;                  // сброс Т/С1
 11e:	10 92 85 00 	sts	0x0085, r1
 122:	10 92 84 00 	sts	0x0084, r1

  loop_until_bit_is_clear(PIND,YOUT);      // корректировка расчета периода импульсов с выхода 'Yout'
 126:	4c 99       	sbic	0x09, 4	; 9
 128:	fe cf       	rjmp	.-4      	; 0x126 <meas_xy+0x96>
  loop_until_bit_is_set(PIND,YOUT);        // ожидание фронта 2-го импульса с выхода 'Yout'
 12a:	4c 9b       	sbis	0x09, 4	; 9
 12c:	fe cf       	rjmp	.-4      	; 0x12a <meas_xy+0x9a>
  TCCR1B = 0x02;                           // запуск Т/С1 с тактовой частотой CLK_io/8
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	80 93 81 00 	sts	0x0081, r24

  loop_until_bit_is_clear(PIND,YOUT);      // ожидание спада 2-го импульса с выхода 'Yout'
 134:	4c 99       	sbic	0x09, 4	; 9
 136:	fe cf       	rjmp	.-4      	; 0x134 <meas_xy+0xa4>
  loop_until_bit_is_set(PIND,YOUT);        // ожидание фронта 3-го импульса с выхода 'Yout'
 138:	4c 9b       	sbis	0x09, 4	; 9
 13a:	fe cf       	rjmp	.-4      	; 0x138 <meas_xy+0xa8>
  TCCR1B = 0x00;                           // останов Т/С1
 13c:	10 92 81 00 	sts	0x0081, r1
  one.T2Y.du_c[BYTE_ONE] = TCNT1L;
 140:	80 91 84 00 	lds	r24, 0x0084
 144:	80 93 8c 01 	sts	0x018C, r24
  one.T2Y.du_c[BYTE_TWO] = TCNT1H;         // -= ПЕРИОД ИМПУЛЬСА 'Y' =-  
 148:	80 91 85 00 	lds	r24, 0x0085
 14c:	80 93 8d 01 	sts	0x018D, r24
}
 150:	08 95       	ret

00000152 <Tx_means>:
  Tx_byte(cc);
}

void Tx_byte(char outbyte)                 // вывод байта в 'USART'
{
  loop_until_bit_is_set(UCSR0A,UDRE0);     // ждать очистки буфера передатчика
 152:	80 91 c0 00 	lds	r24, 0x00C0
 156:	85 ff       	sbrs	r24, 5
 158:	fc cf       	rjmp	.-8      	; 0x152 <Tx_means>
  UDR0 = outbyte;                          // загрузить младший байт данных                                           // в буфер, начать передачу
 15a:	8a e5       	ldi	r24, 0x5A	; 90
 15c:	80 93 c6 00 	sts	0x00C6, r24
  unsigned char d, cc;                     // и выводим в 'USART'

  cc = 0x05a;
  Tx_byte(cc);

  d = one.T1X.du_c[BYTE_ONE]; cc += d; Tx_byte(d);
 160:	90 91 86 01 	lds	r25, 0x0186
  Tx_byte(cc);
}

void Tx_byte(char outbyte)                 // вывод байта в 'USART'
{
  loop_until_bit_is_set(UCSR0A,UDRE0);     // ждать очистки буфера передатчика
 164:	80 91 c0 00 	lds	r24, 0x00C0
 168:	85 ff       	sbrs	r24, 5
 16a:	fc cf       	rjmp	.-8      	; 0x164 <Tx_means+0x12>
  UDR0 = outbyte;                          // загрузить младший байт данных                                           // в буфер, начать передачу
 16c:	90 93 c6 00 	sts	0x00C6, r25

  cc = 0x05a;
  Tx_byte(cc);

  d = one.T1X.du_c[BYTE_ONE]; cc += d; Tx_byte(d);
  d = one.T1X.du_c[BYTE_TWO]; cc += d; Tx_byte(d);
 170:	e0 91 87 01 	lds	r30, 0x0187
  Tx_byte(cc);
}

void Tx_byte(char outbyte)                 // вывод байта в 'USART'
{
  loop_until_bit_is_set(UCSR0A,UDRE0);     // ждать очистки буфера передатчика
 174:	80 91 c0 00 	lds	r24, 0x00C0
 178:	85 ff       	sbrs	r24, 5
 17a:	fc cf       	rjmp	.-8      	; 0x174 <Tx_means+0x22>
  UDR0 = outbyte;                          // загрузить младший байт данных                                           // в буфер, начать передачу
 17c:	e0 93 c6 00 	sts	0x00C6, r30
  cc = 0x05a;
  Tx_byte(cc);

  d = one.T1X.du_c[BYTE_ONE]; cc += d; Tx_byte(d);
  d = one.T1X.du_c[BYTE_TWO]; cc += d; Tx_byte(d);
  d = one.T2X.du_c[BYTE_ONE]; cc += d; Tx_byte(d);
 180:	70 91 88 01 	lds	r23, 0x0188
  Tx_byte(cc);
}

void Tx_byte(char outbyte)                 // вывод байта в 'USART'
{
  loop_until_bit_is_set(UCSR0A,UDRE0);     // ждать очистки буфера передатчика
 184:	80 91 c0 00 	lds	r24, 0x00C0
 188:	85 ff       	sbrs	r24, 5
 18a:	fc cf       	rjmp	.-8      	; 0x184 <Tx_means+0x32>
  UDR0 = outbyte;                          // загрузить младший байт данных                                           // в буфер, начать передачу
 18c:	70 93 c6 00 	sts	0x00C6, r23
  Tx_byte(cc);

  d = one.T1X.du_c[BYTE_ONE]; cc += d; Tx_byte(d);
  d = one.T1X.du_c[BYTE_TWO]; cc += d; Tx_byte(d);
  d = one.T2X.du_c[BYTE_ONE]; cc += d; Tx_byte(d);
  d = one.T2X.du_c[BYTE_TWO]; cc += d; Tx_byte(d);
 190:	60 91 89 01 	lds	r22, 0x0189
  Tx_byte(cc);
}

void Tx_byte(char outbyte)                 // вывод байта в 'USART'
{
  loop_until_bit_is_set(UCSR0A,UDRE0);     // ждать очистки буфера передатчика
 194:	80 91 c0 00 	lds	r24, 0x00C0
 198:	85 ff       	sbrs	r24, 5
 19a:	fc cf       	rjmp	.-8      	; 0x194 <Tx_means+0x42>
  UDR0 = outbyte;                          // загрузить младший байт данных                                           // в буфер, начать передачу
 19c:	60 93 c6 00 	sts	0x00C6, r22
  d = one.T1X.du_c[BYTE_ONE]; cc += d; Tx_byte(d);
  d = one.T1X.du_c[BYTE_TWO]; cc += d; Tx_byte(d);
  d = one.T2X.du_c[BYTE_ONE]; cc += d; Tx_byte(d);
  d = one.T2X.du_c[BYTE_TWO]; cc += d; Tx_byte(d);

  d = one.T1Y.du_c[BYTE_ONE]; cc += d; Tx_byte(d);
 1a0:	50 91 8a 01 	lds	r21, 0x018A
  Tx_byte(cc);
}

void Tx_byte(char outbyte)                 // вывод байта в 'USART'
{
  loop_until_bit_is_set(UCSR0A,UDRE0);     // ждать очистки буфера передатчика
 1a4:	80 91 c0 00 	lds	r24, 0x00C0
 1a8:	85 ff       	sbrs	r24, 5
 1aa:	fc cf       	rjmp	.-8      	; 0x1a4 <Tx_means+0x52>
  UDR0 = outbyte;                          // загрузить младший байт данных                                           // в буфер, начать передачу
 1ac:	50 93 c6 00 	sts	0x00C6, r21
  d = one.T1X.du_c[BYTE_TWO]; cc += d; Tx_byte(d);
  d = one.T2X.du_c[BYTE_ONE]; cc += d; Tx_byte(d);
  d = one.T2X.du_c[BYTE_TWO]; cc += d; Tx_byte(d);

  d = one.T1Y.du_c[BYTE_ONE]; cc += d; Tx_byte(d);
  d = one.T1Y.du_c[BYTE_TWO]; cc += d; Tx_byte(d);
 1b0:	40 91 8b 01 	lds	r20, 0x018B
  Tx_byte(cc);
}

void Tx_byte(char outbyte)                 // вывод байта в 'USART'
{
  loop_until_bit_is_set(UCSR0A,UDRE0);     // ждать очистки буфера передатчика
 1b4:	80 91 c0 00 	lds	r24, 0x00C0
 1b8:	85 ff       	sbrs	r24, 5
 1ba:	fc cf       	rjmp	.-8      	; 0x1b4 <Tx_means+0x62>
  UDR0 = outbyte;                          // загрузить младший байт данных                                           // в буфер, начать передачу
 1bc:	40 93 c6 00 	sts	0x00C6, r20
  d = one.T2X.du_c[BYTE_ONE]; cc += d; Tx_byte(d);
  d = one.T2X.du_c[BYTE_TWO]; cc += d; Tx_byte(d);

  d = one.T1Y.du_c[BYTE_ONE]; cc += d; Tx_byte(d);
  d = one.T1Y.du_c[BYTE_TWO]; cc += d; Tx_byte(d);
  d = one.T2Y.du_c[BYTE_ONE]; cc += d; Tx_byte(d);
 1c0:	30 91 8c 01 	lds	r19, 0x018C
  Tx_byte(cc);
}

void Tx_byte(char outbyte)                 // вывод байта в 'USART'
{
  loop_until_bit_is_set(UCSR0A,UDRE0);     // ждать очистки буфера передатчика
 1c4:	80 91 c0 00 	lds	r24, 0x00C0
 1c8:	85 ff       	sbrs	r24, 5
 1ca:	fc cf       	rjmp	.-8      	; 0x1c4 <Tx_means+0x72>
  UDR0 = outbyte;                          // загрузить младший байт данных                                           // в буфер, начать передачу
 1cc:	30 93 c6 00 	sts	0x00C6, r19
  d = one.T2X.du_c[BYTE_TWO]; cc += d; Tx_byte(d);

  d = one.T1Y.du_c[BYTE_ONE]; cc += d; Tx_byte(d);
  d = one.T1Y.du_c[BYTE_TWO]; cc += d; Tx_byte(d);
  d = one.T2Y.du_c[BYTE_ONE]; cc += d; Tx_byte(d);
  d = one.T2Y.du_c[BYTE_TWO]; cc += d; Tx_byte(d);
 1d0:	20 91 8d 01 	lds	r18, 0x018D
  Tx_byte(cc);
}

void Tx_byte(char outbyte)                 // вывод байта в 'USART'
{
  loop_until_bit_is_set(UCSR0A,UDRE0);     // ждать очистки буфера передатчика
 1d4:	80 91 c0 00 	lds	r24, 0x00C0
 1d8:	85 ff       	sbrs	r24, 5
 1da:	fc cf       	rjmp	.-8      	; 0x1d4 <Tx_means+0x82>
  UDR0 = outbyte;                          // загрузить младший байт данных                                           // в буфер, начать передачу
 1dc:	20 93 c6 00 	sts	0x00C6, r18
  Tx_byte(cc);
}

void Tx_byte(char outbyte)                 // вывод байта в 'USART'
{
  loop_until_bit_is_set(UCSR0A,UDRE0);     // ждать очистки буфера передатчика
 1e0:	80 91 c0 00 	lds	r24, 0x00C0
 1e4:	85 ff       	sbrs	r24, 5
 1e6:	fc cf       	rjmp	.-8      	; 0x1e0 <Tx_means+0x8e>
  unsigned char d, cc;                     // и выводим в 'USART'

  cc = 0x05a;
  Tx_byte(cc);

  d = one.T1X.du_c[BYTE_ONE]; cc += d; Tx_byte(d);
 1e8:	9e 0f       	add	r25, r30
  d = one.T1X.du_c[BYTE_TWO]; cc += d; Tx_byte(d);
 1ea:	96 5a       	subi	r25, 0xA6	; 166
  d = one.T2X.du_c[BYTE_ONE]; cc += d; Tx_byte(d);
 1ec:	97 0f       	add	r25, r23
  d = one.T2X.du_c[BYTE_TWO]; cc += d; Tx_byte(d);
 1ee:	96 0f       	add	r25, r22

  d = one.T1Y.du_c[BYTE_ONE]; cc += d; Tx_byte(d);
 1f0:	95 0f       	add	r25, r21
  d = one.T1Y.du_c[BYTE_TWO]; cc += d; Tx_byte(d);
 1f2:	94 0f       	add	r25, r20
  d = one.T2Y.du_c[BYTE_ONE]; cc += d; Tx_byte(d);
 1f4:	93 0f       	add	r25, r19
  d = one.T2Y.du_c[BYTE_TWO]; cc += d; Tx_byte(d);
 1f6:	92 0f       	add	r25, r18
}

void Tx_byte(char outbyte)                 // вывод байта в 'USART'
{
  loop_until_bit_is_set(UCSR0A,UDRE0);     // ждать очистки буфера передатчика
  UDR0 = outbyte;                          // загрузить младший байт данных                                           // в буфер, начать передачу
 1f8:	90 93 c6 00 	sts	0x00C6, r25
  d = one.T1Y.du_c[BYTE_TWO]; cc += d; Tx_byte(d);
  d = one.T2Y.du_c[BYTE_ONE]; cc += d; Tx_byte(d);
  d = one.T2Y.du_c[BYTE_TWO]; cc += d; Tx_byte(d);

  Tx_byte(cc);
}
 1fc:	08 95       	ret

000001fe <main>:
/*==============================================================================*/
int main(void)
{

// инициализация USART (9600)         
  UCSR0A = 0x00;                           // запрет на время установки скорости        
 1fe:	10 92 c0 00 	sts	0x00C0, r1
  UCSR0B = 0x00;                           // передачи настроек USART          
 202:	10 92 c1 00 	sts	0x00C1, r1
  UCSR0C = 0x06;                           // размер слова данных 8 бит           
 206:	86 e0       	ldi	r24, 0x06	; 6
 208:	80 93 c2 00 	sts	0x00C2, r24
  UBRR0L = (unsigned char)UBBR_UART;       // задание скорости 9600
 20c:	87 e4       	ldi	r24, 0x47	; 71
 20e:	80 93 c4 00 	sts	0x00C4, r24
  UBRR0H = (unsigned char)(UBBR_UART>>8);  // или 2400 бод
 212:	10 92 c5 00 	sts	0x00C5, r1
  UCSR0B = 0x08;                           // разрешение передачи
 216:	88 e0       	ldi	r24, 0x08	; 8
 218:	80 93 c1 00 	sts	0x00C1, r24

// инициализация ИСПОЛЬЗУЕМЫХ портов ввода/вывода
  PORTD = (1<<RS485)|(1<<KLINE)|(1<<SET_)|(1<<YOUT)|(1<<XOUT)|(1<<TMPR_RD)|(1<<TXD)|(1<<RXD);
 21c:	8f ef       	ldi	r24, 0xFF	; 255
 21e:	8b b9       	out	0x0b, r24	; 11
  DDRD  = (1<<RS485)|(1<<KLINE)|(1<<TXD);
 220:	82 ec       	ldi	r24, 0xC2	; 194
 222:	8a b9       	out	0x0a, r24	; 10
  PORTB = (1<<STR)|(1<<LED);
 224:	85 e0       	ldi	r24, 0x05	; 5
 226:	85 b9       	out	0x05, r24	; 5
  DDRB  = (1<<STR)|(1<<DIR)|(1<<LED);
 228:	87 e0       	ldi	r24, 0x07	; 7
 22a:	84 b9       	out	0x04, r24	; 4

// настройка Т/С1
  TCCR1B = 0x00;                           // останов Т/С1
 22c:	10 92 81 00 	sts	0x0081, r1
  TCNT1H = 0x00;
 230:	10 92 85 00 	sts	0x0085, r1
  TCNT1L = 0x00;                           // сброс Т/С1
 234:	10 92 84 00 	sts	0x0084, r1

  get_one = 0;
 238:	10 92 00 01 	sts	0x0100, r1

  for(;;)
  {
    meas_xy();                             // получаем один замер
 23c:	0e 94 48 00 	call	0x90	; 0x90 <meas_xy>

    //  расчет "скользящего среднего":
                                           // заносим новый замер
    Buff[get_one]=one;
 240:	70 91 00 01 	lds	r23, 0x0100
 244:	e7 2f       	mov	r30, r23
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	93 e0       	ldi	r25, 0x03	; 3
 24a:	ee 0f       	add	r30, r30
 24c:	ff 1f       	adc	r31, r31
 24e:	9a 95       	dec	r25
 250:	e1 f7       	brne	.-8      	; 0x24a <main+0x4c>
 252:	ee 5f       	subi	r30, 0xFE	; 254
 254:	fe 4f       	sbci	r31, 0xFE	; 254
 256:	a6 e8       	ldi	r26, 0x86	; 134
 258:	b1 e0       	ldi	r27, 0x01	; 1
 25a:	88 e0       	ldi	r24, 0x08	; 8
 25c:	0d 90       	ld	r0, X+
 25e:	01 92       	st	Z+, r0
 260:	81 50       	subi	r24, 0x01	; 1
 262:	e1 f7       	brne	.-8      	; 0x25c <main+0x5e>
 264:	20 e0       	ldi	r18, 0x00	; 0
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	40 e0       	ldi	r20, 0x00	; 0
 26a:	50 e0       	ldi	r21, 0x00	; 0
 26c:	60 e0       	ldi	r22, 0x00	; 0
 26e:	12 c0       	rjmp	.+36     	; 0x294 <main+0x96>
                                           // считаем среднее из "очереди"
    s=0; for(i=0; i<NSUM; i++) s += Buff[i].T1X.du_i;
 270:	e6 2f       	mov	r30, r22
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	83 e0       	ldi	r24, 0x03	; 3
 276:	ee 0f       	add	r30, r30
 278:	ff 1f       	adc	r31, r31
 27a:	8a 95       	dec	r24
 27c:	e1 f7       	brne	.-8      	; 0x276 <main+0x78>
 27e:	ee 5f       	subi	r30, 0xFE	; 254
 280:	fe 4f       	sbci	r31, 0xFE	; 254
 282:	80 81       	ld	r24, Z
 284:	91 81       	ldd	r25, Z+1	; 0x01
 286:	a0 e0       	ldi	r26, 0x00	; 0
 288:	b0 e0       	ldi	r27, 0x00	; 0
 28a:	28 0f       	add	r18, r24
 28c:	39 1f       	adc	r19, r25
 28e:	4a 1f       	adc	r20, r26
 290:	5b 1f       	adc	r21, r27
 292:	6f 5f       	subi	r22, 0xFF	; 255
 294:	60 31       	cpi	r22, 0x10	; 16
 296:	60 f3       	brcs	.-40     	; 0x270 <main+0x72>
    s=s>>KDEL; one.T1X.du_i = (unsigned int)(0x0ffff & s); // T1.X'
 298:	b4 e0       	ldi	r27, 0x04	; 4
 29a:	56 95       	lsr	r21
 29c:	47 95       	ror	r20
 29e:	37 95       	ror	r19
 2a0:	27 95       	ror	r18
 2a2:	ba 95       	dec	r27
 2a4:	d1 f7       	brne	.-12     	; 0x29a <main+0x9c>
 2a6:	30 93 87 01 	sts	0x0187, r19
 2aa:	20 93 86 01 	sts	0x0186, r18
 2ae:	20 e0       	ldi	r18, 0x00	; 0
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	40 e0       	ldi	r20, 0x00	; 0
 2b4:	50 e0       	ldi	r21, 0x00	; 0
 2b6:	60 e0       	ldi	r22, 0x00	; 0
 2b8:	12 c0       	rjmp	.+36     	; 0x2de <main+0xe0>
    s=0; for(i=0; i<NSUM; i++) s += Buff[i].T2X.du_i;
 2ba:	e6 2f       	mov	r30, r22
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	a3 e0       	ldi	r26, 0x03	; 3
 2c0:	ee 0f       	add	r30, r30
 2c2:	ff 1f       	adc	r31, r31
 2c4:	aa 95       	dec	r26
 2c6:	e1 f7       	brne	.-8      	; 0x2c0 <main+0xc2>
 2c8:	ee 5f       	subi	r30, 0xFE	; 254
 2ca:	fe 4f       	sbci	r31, 0xFE	; 254
 2cc:	82 81       	ldd	r24, Z+2	; 0x02
 2ce:	93 81       	ldd	r25, Z+3	; 0x03
 2d0:	a0 e0       	ldi	r26, 0x00	; 0
 2d2:	b0 e0       	ldi	r27, 0x00	; 0
 2d4:	28 0f       	add	r18, r24
 2d6:	39 1f       	adc	r19, r25
 2d8:	4a 1f       	adc	r20, r26
 2da:	5b 1f       	adc	r21, r27
 2dc:	6f 5f       	subi	r22, 0xFF	; 255
 2de:	60 31       	cpi	r22, 0x10	; 16
 2e0:	60 f3       	brcs	.-40     	; 0x2ba <main+0xbc>
    s=s>>KDEL; one.T2X.du_i = (unsigned int)(0x0ffff & s); // T2.X'
 2e2:	94 e0       	ldi	r25, 0x04	; 4
 2e4:	56 95       	lsr	r21
 2e6:	47 95       	ror	r20
 2e8:	37 95       	ror	r19
 2ea:	27 95       	ror	r18
 2ec:	9a 95       	dec	r25
 2ee:	d1 f7       	brne	.-12     	; 0x2e4 <main+0xe6>
 2f0:	30 93 89 01 	sts	0x0189, r19
 2f4:	20 93 88 01 	sts	0x0188, r18
 2f8:	20 e0       	ldi	r18, 0x00	; 0
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	40 e0       	ldi	r20, 0x00	; 0
 2fe:	50 e0       	ldi	r21, 0x00	; 0
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	12 c0       	rjmp	.+36     	; 0x328 <main+0x12a>
    s=0; for(i=0; i<NSUM; i++) s += Buff[i].T1Y.du_i;
 304:	e6 2f       	mov	r30, r22
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	83 e0       	ldi	r24, 0x03	; 3
 30a:	ee 0f       	add	r30, r30
 30c:	ff 1f       	adc	r31, r31
 30e:	8a 95       	dec	r24
 310:	e1 f7       	brne	.-8      	; 0x30a <main+0x10c>
 312:	ee 5f       	subi	r30, 0xFE	; 254
 314:	fe 4f       	sbci	r31, 0xFE	; 254
 316:	84 81       	ldd	r24, Z+4	; 0x04
 318:	95 81       	ldd	r25, Z+5	; 0x05
 31a:	a0 e0       	ldi	r26, 0x00	; 0
 31c:	b0 e0       	ldi	r27, 0x00	; 0
 31e:	28 0f       	add	r18, r24
 320:	39 1f       	adc	r19, r25
 322:	4a 1f       	adc	r20, r26
 324:	5b 1f       	adc	r21, r27
 326:	6f 5f       	subi	r22, 0xFF	; 255
 328:	60 31       	cpi	r22, 0x10	; 16
 32a:	60 f3       	brcs	.-40     	; 0x304 <main+0x106>
    s=s>>KDEL; one.T1Y.du_i = (unsigned int)(0x0ffff & s); // T1.Y'
 32c:	b4 e0       	ldi	r27, 0x04	; 4
 32e:	56 95       	lsr	r21
 330:	47 95       	ror	r20
 332:	37 95       	ror	r19
 334:	27 95       	ror	r18
 336:	ba 95       	dec	r27
 338:	d1 f7       	brne	.-12     	; 0x32e <main+0x130>
 33a:	30 93 8b 01 	sts	0x018B, r19
 33e:	20 93 8a 01 	sts	0x018A, r18
 342:	20 e0       	ldi	r18, 0x00	; 0
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	40 e0       	ldi	r20, 0x00	; 0
 348:	50 e0       	ldi	r21, 0x00	; 0
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	12 c0       	rjmp	.+36     	; 0x372 <main+0x174>
    s=0; for(i=0; i<NSUM; i++) s += Buff[i].T2Y.du_i;
 34e:	e6 2f       	mov	r30, r22
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	a3 e0       	ldi	r26, 0x03	; 3
 354:	ee 0f       	add	r30, r30
 356:	ff 1f       	adc	r31, r31
 358:	aa 95       	dec	r26
 35a:	e1 f7       	brne	.-8      	; 0x354 <main+0x156>
 35c:	ee 5f       	subi	r30, 0xFE	; 254
 35e:	fe 4f       	sbci	r31, 0xFE	; 254
 360:	86 81       	ldd	r24, Z+6	; 0x06
 362:	97 81       	ldd	r25, Z+7	; 0x07
 364:	a0 e0       	ldi	r26, 0x00	; 0
 366:	b0 e0       	ldi	r27, 0x00	; 0
 368:	28 0f       	add	r18, r24
 36a:	39 1f       	adc	r19, r25
 36c:	4a 1f       	adc	r20, r26
 36e:	5b 1f       	adc	r21, r27
 370:	6f 5f       	subi	r22, 0xFF	; 255
 372:	60 31       	cpi	r22, 0x10	; 16
 374:	60 f3       	brcs	.-40     	; 0x34e <main+0x150>
 376:	60 93 01 01 	sts	0x0101, r22
    s=s>>KDEL; one.T2Y.du_i = (unsigned int)(0x0ffff & s); // T2.Y'
 37a:	da 01       	movw	r26, r20
 37c:	c9 01       	movw	r24, r18
 37e:	24 e0       	ldi	r18, 0x04	; 4
 380:	b6 95       	lsr	r27
 382:	a7 95       	ror	r26
 384:	97 95       	ror	r25
 386:	87 95       	ror	r24
 388:	2a 95       	dec	r18
 38a:	d1 f7       	brne	.-12     	; 0x380 <main+0x182>
 38c:	80 93 82 01 	sts	0x0182, r24
 390:	90 93 83 01 	sts	0x0183, r25
 394:	a0 93 84 01 	sts	0x0184, r26
 398:	b0 93 85 01 	sts	0x0185, r27
 39c:	90 93 8d 01 	sts	0x018D, r25
 3a0:	80 93 8c 01 	sts	0x018C, r24
    get_one++; if(get_one == NSUM) get_one = 0;
 3a4:	87 2f       	mov	r24, r23
 3a6:	8f 5f       	subi	r24, 0xFF	; 255
 3a8:	80 93 00 01 	sts	0x0100, r24
 3ac:	80 31       	cpi	r24, 0x10	; 16
 3ae:	11 f4       	brne	.+4      	; 0x3b4 <main+0x1b6>
 3b0:	10 92 00 01 	sts	0x0100, r1

    Tx_means();                            // выводим "среднее" в 'USART'
 3b4:	0e 94 a9 00 	call	0x152	; 0x152 <Tx_means>

    cpl(PORTB, STR);                       // cброс сторожевого таймера
 3b8:	2a 9b       	sbis	0x05, 2	; 5
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <main+0x1c2>
 3bc:	2a 98       	cbi	0x05, 2	; 5
 3be:	3e cf       	rjmp	.-388    	; 0x23c <main+0x3e>
 3c0:	2a 9a       	sbi	0x05, 2	; 5
 3c2:	3c cf       	rjmp	.-392    	; 0x23c <main+0x3e>

000003c4 <Tx_byte>:

  Tx_byte(cc);
}

void Tx_byte(char outbyte)                 // вывод байта в 'USART'
{
 3c4:	98 2f       	mov	r25, r24
  loop_until_bit_is_set(UCSR0A,UDRE0);     // ждать очистки буфера передатчика
 3c6:	80 91 c0 00 	lds	r24, 0x00C0
 3ca:	85 ff       	sbrs	r24, 5
 3cc:	fc cf       	rjmp	.-8      	; 0x3c6 <Tx_byte+0x2>
  UDR0 = outbyte;                          // загрузить младший байт данных                                           // в буфер, начать передачу
 3ce:	90 93 c6 00 	sts	0x00C6, r25
}
 3d2:	08 95       	ret

000003d4 <_exit>:
 3d4:	f8 94       	cli

000003d6 <__stop_program>:
 3d6:	ff cf       	rjmp	.-2      	; 0x3d6 <__stop_program>
